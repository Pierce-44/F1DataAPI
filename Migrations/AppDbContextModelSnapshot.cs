// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace F1DataAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("AverageSpeedDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("speed")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AverageSpeed");
                });

            modelBuilder.Entity("CalendarCircuit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("circuitId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("circuitName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("CalendarCircuit");
                });

            modelBuilder.Entity("CalendarLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("locality")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CalendarLocation");
                });

            modelBuilder.Entity("CalendarRace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CircuitId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QualifyingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("raceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("time")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CircuitId");

                    b.HasIndex("QualifyingId");

                    b.ToTable("Calendar");
                });

            modelBuilder.Entity("CircuitDriver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("circuitId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("circuitName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CircuitDriver");
                });

            modelBuilder.Entity("ConstructorDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("constructorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Constructor");
                });

            modelBuilder.Entity("Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("driverId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("familyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("givenName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("DriverDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("dateOfBirth")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("familyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("givenName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("nationality")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("permanentNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("DriverQualyResults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("driverId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DriverQualyResults");
                });

            modelBuilder.Entity("DriverResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("driverId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DriverResults");
                });

            modelBuilder.Entity("FastestLapDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AverageSpeedId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AverageSpeedId");

                    b.ToTable("FastestLap");
                });

            modelBuilder.Entity("Qualifying", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("time")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Qualifying");
                });

            modelBuilder.Entity("QualifyingResults", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DriverId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RacesQualyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("position")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("RacesQualyId");

                    b.ToTable("QualifyingResults");
                });

            modelBuilder.Entity("QualyCircuit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("circuitId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("QualyCircuit");
                });

            modelBuilder.Entity("QualyDriver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("familyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("givenName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("QualyDriver");
                });

            modelBuilder.Entity("Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CircuitId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DriverResultId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("raceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CircuitId");

                    b.HasIndex("DriverResultId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("RacesQualy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CircuitId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DriverQualyResultsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("raceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CircuitId");

                    b.HasIndex("DriverQualyResultsId");

                    b.ToTable("RacesQualy");
                });

            modelBuilder.Entity("Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConstructorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DriverId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FastestLapId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RaceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("grid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("points")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("position")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("positionText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConstructorId");

                    b.HasIndex("DriverId");

                    b.HasIndex("FastestLapId");

                    b.HasIndex("RaceId");

                    b.HasIndex("TimeId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("constructorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("TeamDrivers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("driverId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("familyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("givenName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamDrivers");
                });

            modelBuilder.Entity("TimeDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("millis")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("time")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Time");
                });

            modelBuilder.Entity("CalendarCircuit", b =>
                {
                    b.HasOne("CalendarLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("CalendarRace", b =>
                {
                    b.HasOne("CalendarCircuit", "Circuit")
                        .WithMany()
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Qualifying", "Qualifying")
                        .WithMany()
                        .HasForeignKey("QualifyingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Circuit");

                    b.Navigation("Qualifying");
                });

            modelBuilder.Entity("FastestLapDetail", b =>
                {
                    b.HasOne("AverageSpeedDetail", "AverageSpeed")
                        .WithMany()
                        .HasForeignKey("AverageSpeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AverageSpeed");
                });

            modelBuilder.Entity("QualifyingResults", b =>
                {
                    b.HasOne("QualyDriver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RacesQualy", null)
                        .WithMany("QualifyingResults")
                        .HasForeignKey("RacesQualyId");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("Race", b =>
                {
                    b.HasOne("CircuitDriver", "Circuit")
                        .WithMany()
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DriverResult", null)
                        .WithMany("Races")
                        .HasForeignKey("DriverResultId");

                    b.Navigation("Circuit");
                });

            modelBuilder.Entity("RacesQualy", b =>
                {
                    b.HasOne("QualyCircuit", "Circuit")
                        .WithMany()
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DriverQualyResults", null)
                        .WithMany("Races")
                        .HasForeignKey("DriverQualyResultsId");

                    b.Navigation("Circuit");
                });

            modelBuilder.Entity("Result", b =>
                {
                    b.HasOne("ConstructorDetail", "Constructor")
                        .WithMany()
                        .HasForeignKey("ConstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DriverDetail", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastestLapDetail", "FastestLap")
                        .WithMany()
                        .HasForeignKey("FastestLapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Race", null)
                        .WithMany("Results")
                        .HasForeignKey("RaceId");

                    b.HasOne("TimeDetail", "Time")
                        .WithMany()
                        .HasForeignKey("TimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Constructor");

                    b.Navigation("Driver");

                    b.Navigation("FastestLap");

                    b.Navigation("Time");
                });

            modelBuilder.Entity("TeamDrivers", b =>
                {
                    b.HasOne("Team", null)
                        .WithMany("Drivers")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("DriverQualyResults", b =>
                {
                    b.Navigation("Races");
                });

            modelBuilder.Entity("DriverResult", b =>
                {
                    b.Navigation("Races");
                });

            modelBuilder.Entity("Race", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("RacesQualy", b =>
                {
                    b.Navigation("QualifyingResults");
                });

            modelBuilder.Entity("Team", b =>
                {
                    b.Navigation("Drivers");
                });
#pragma warning restore 612, 618
        }
    }
}
